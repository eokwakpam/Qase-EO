{
	"info": {
		"_postman_id": "f3e40c44-4c99-409e-9633-229fac6165b8",
		"name": "API Testing",
		"description": "# üöÄ Get started here\n\nThis collection guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this collection**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these request types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT and PATCH requests.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a variable called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more scripts in \"Tests\" to verify if the API works as expected and execute flows.\n    \n\n## ‚ÑπÔ∏è Resources\n\n[Building requests](https://learning.postman.com/docs/sending-requests/requests/)  \n[Authorizing requests](https://learning.postman.com/docs/sending-requests/authorization/)  \n[Using variables](https://learning.postman.com/docs/sending-requests/variables/)  \n[Managing environments](https://learning.postman.com/docs/sending-requests/managing-environments/)  \n[Writing scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24810843",
		"_collection_link": "https://monowork.postman.co/workspace/Sparta~352d3358-d723-4e41-ac88-a2fee1a05b73/collection/24810843-f3e40c44-4c99-409e-9633-229fac6165b8?action=share&source=collection_link&creator=24810843"
	},
	"item": [
		{
			"name": "gateway ‚úÖ",
			"item": [
				{
					"name": "health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞",
									"// qase: 1",
									"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"ok\");",
									"});",
									"",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ info",
									"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ info\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('info');",
									"    pm.expect(jsonData.info).to.be.an('object');",
									"});",
									"",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ error",
									"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.be.an('object');",
									"});",
									"",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ details",
									"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('details');",
									"    pm.expect(jsonData.details).to.be.an('object');",
									"});",
									"",
									"// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã info, error, –∏ details –ø—É—Å—Ç—ã–µ",
									"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã info, error, –∏ details –ø—É—Å—Ç—ã–µ\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData.info)).to.have.lengthOf(0);",
									"    pm.expect(Object.keys(jsonData.error)).to.have.lengthOf(0);",
									"    pm.expect(Object.keys(jsonData.details)).to.have.lengthOf(0);",
									"});",
									"",
									"pm.test(\"Headers is valid\", function() {",
									"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/health",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "resources ‚ùå",
			"item": [
				{
					"name": "create Resource",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Access-Control-Request-Method",
								"value": "POST"
							},
							{
								"key": "Access-Control-Request-Headers",
								"value": "content-type"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "cross-site"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "sparta.monowork.dev"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"users_service.roles\",\n  \"name\": \"roles\",\n  \"description\": \"string\",\n  \"is_internal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/resources",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Resources",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\""
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "cross-site"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "sparta.monowork.dev"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"roles\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/resources?code=users_service.roles&name=roles",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"resources"
							],
							"query": [
								{
									"key": "code",
									"value": "users_service.roles"
								},
								{
									"key": "name",
									"value": "roles"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "edit Resource",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Access-Control-Request-Method",
								"value": "PUT"
							},
							{
								"key": "Access-Control-Request-Headers",
								"value": "content-type"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "cross-site"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "sparta.monowork.dev"
							}
						],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/resources/123",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"resources",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Resource By Code",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Access-Control-Request-Method",
								"value": "DELETE"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "cross-site"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "host",
								"value": "sparta.monowork.dev"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/resources/123",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"resources",
								"123"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "link role & permission ‚ùå",
			"item": [
				{
					"name": "Delete a link Role & Permission Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/roles/permissions",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"roles",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a link Role & Permission",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/roles/role/permissions/132",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"roles",
								"role",
								"permissions",
								"132"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a link Role & Permission",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/roles/role/permissions/132",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"roles",
								"role",
								"permissions",
								"132"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "link user & permission ‚ùå",
			"item": [
				{
					"name": "Create a link User & Permission Copy 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/users/permissions",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"users",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a link User & Permission",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/users/132/permissions/123",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"users",
								"132",
								"permissions",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a link User & Permission Copy",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/users/132/permissions/132",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"users",
								"132",
								"permissions",
								"132"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "permissions ‚ùå",
			"item": [
				{
					"name": "Create permission",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/permissions",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create permission",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/permissions",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update permission",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/permissions/13312",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"permissions",
								"13312"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete permission",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/permissions/123312",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"permissions",
								"123312"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "roles ‚ùå",
			"item": [
				{
					"name": "Get Role",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/roles?id=adfd0649-459f-4f67-97e2-9094e663a9cc",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"roles"
							],
							"query": [
								{
									"key": "id",
									"value": "adfd0649-459f-4f67-97e2-9094e663a9cc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Role",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/roles",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/roles/132123",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"roles",
								"132123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/auth/roles/312321123213",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"roles",
								"312321123213"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user ‚ùå",
			"item": [
				{
					"name": "Get Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/users?id=4e9531dd-83a6-48d1-99b1-e6dd3eb77825&role_id=0874aca3-d666-46a7-ba71-97682d86207f",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "id",
									"value": "4e9531dd-83a6-48d1-99b1-e6dd3eb77825"
								},
								{
									"key": "role_id",
									"value": "0874aca3-d666-46a7-ba71-97682d86207f"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Authorized User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/users/profile?ignore_cache=true",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile"
							],
							"query": [
								{
									"key": "ignore_cache",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sparta.monowork.dev/api/v1/users/5367a1e2-54c3-43f0-98c5-88d035b08c1d",
							"protocol": "https",
							"host": [
								"sparta",
								"monowork",
								"dev"
							],
							"path": [
								"api",
								"v1",
								"users",
								"5367a1e2-54c3-43f0-98c5-88d035b08c1d"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "bot types",
			"item": [
				{
					"name": "positive",
					"item": [
						{
							"name": "Create bot type ‚úÖ",
							"item": [
								{
									"name": "Create bot type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('created_at');",
													"    pm.expect(result.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('updated_at');",
													"    pm.expect(result.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"new bot type\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get bot type ‚úÖ",
							"item": [
								{
									"name": "Get bot type all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ pagination\", function () {",
													"    const pagination = pm.response.json().pagination;",
													"    pm.expect(pagination).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª–µ total —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è total –≤ –æ–±—ä–µ–∫—Ç–µ pagination\", function () {",
													"    const total = pm.response.json().pagination.total;",
													"    pm.expect(total).to.be.a('number');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.title).to.not.be.oneOf(['', null, ' ']);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.description).to.not.be.oneOf([null]);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"        pm.expect(item.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID\", function () {",
													"    const ids = pm.response.json().result.map(item => item.id);",
													"    const uniqueIds = new Set(ids);",
													"    pm.expect(ids.length).to.equal(uniqueIds.size);",
													"});",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get bot type with offset 10",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ pagination\", function () {",
													"    const pagination = pm.response.json().pagination;",
													"    pm.expect(pagination).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª–µ total —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è total –≤ –æ–±—ä–µ–∫—Ç–µ pagination\", function () {",
													"    const total = pm.response.json().pagination.total;",
													"    pm.expect(total).to.be.a('number');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.title).to.not.be.oneOf(['', null, ' ']);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.description).to.not.be.oneOf([null]);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"        pm.expect(item.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID\", function () {",
													"    const ids = pm.response.json().result.map(item => item.id);",
													"    const uniqueIds = new Set(ids);",
													"    pm.expect(ids.length).to.equal(uniqueIds.size);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è offset –≤ –æ–±—ä–µ–∫—Ç–µ pagination",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è offset –≤ –æ–±—ä–µ–∫—Ç–µ pagination\", function () {",
													"    const pagination = pm.response.json().pagination;",
													"    pm.expect(pagination).to.have.property('offset');",
													"    pm.expect(pagination.offset).to.be.a('number');",
													"    pm.expect(pagination.offset).to.equal(10);  // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ offset –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–≤–µ–Ω 10",
													"});",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"offset\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get bot type with limit 10",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è pagination.total\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pagination.total).to.eql(10);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.title).to.not.be.oneOf(['', null, ' ']);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.description).to.not.be.oneOf([null]);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"        pm.expect(item.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID\", function () {",
													"    const ids = pm.response.json().result.map(item => item.id);",
													"    const uniqueIds = new Set(ids);",
													"    pm.expect(ids.length).to.equal(uniqueIds.size);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è limit –≤ –æ–±—ä–µ–∫—Ç–µ pagination",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è limit –≤ –æ–±—ä–µ–∫—Ç–µ pagination\", function () {",
													"    const pagination = pm.response.json().pagination;",
													"    pm.expect(pagination).to.have.property('limit');",
													"    pm.expect(pagination.offset).to.be.a('number');",
													"    pm.expect(pagination.offset).to.equal(10);  // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ offset –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–≤–µ–Ω 10",
													"});",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"limit\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get bot type with sort order ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ pagination\", function () {",
													"    const pagination = pm.response.json().pagination;",
													"    pm.expect(pagination).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª–µ total —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è total –≤ –æ–±—ä–µ–∫—Ç–µ pagination\", function () {",
													"    const total = pm.response.json().pagination.total;",
													"    pm.expect(total).to.be.a('number');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.title).to.not.be.oneOf(['', null, ' ']);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.description).to.not.be.oneOf([null]);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"        pm.expect(item.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID\", function () {",
													"    const ids = pm.response.json().result.map(item => item.id);",
													"    const uniqueIds = new Set(ids);",
													"    pm.expect(ids.length).to.equal(uniqueIds.size);",
													"});",
													"",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sort_order\": \"ASC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get bot type with sort order DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ pagination\", function () {",
													"    const pagination = pm.response.json().pagination;",
													"    pm.expect(pagination).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª–µ total —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è total –≤ –æ–±—ä–µ–∫—Ç–µ pagination\", function () {",
													"    const total = pm.response.json().pagination.total;",
													"    pm.expect(total).to.be.a('number');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.title).to.not.be.oneOf(['', null, ' ']);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.description).to.not.be.oneOf([null]);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"        pm.expect(item.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID\", function () {",
													"    const ids = pm.response.json().result.map(item => item.id);",
													"    const uniqueIds = new Set(ids);",
													"    pm.expect(ids.length).to.equal(uniqueIds.size);",
													"});",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sort_order\": \"DESC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get bot type with order by title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ pagination\", function () {",
													"    const pagination = pm.response.json().pagination;",
													"    pm.expect(pagination).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª–µ total —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è total –≤ –æ–±—ä–µ–∫—Ç–µ pagination\", function () {",
													"    const total = pm.response.json().pagination.total;",
													"    pm.expect(total).to.be.a('number');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.title).to.not.be.oneOf(['', null, ' ']);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.description).to.not.be.oneOf([null]);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"        pm.expect(item.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID\", function () {",
													"    const ids = pm.response.json().result.map(item => item.id);",
													"    const uniqueIds = new Set(ids);",
													"    pm.expect(ids.length).to.equal(uniqueIds.size);",
													"});",
													"",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"order_by\": \"title\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get bot type by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ pagination\", function () {",
													"    const pagination = pm.response.json().pagination;",
													"    pm.expect(pagination).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª–µ total —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è total –≤ –æ–±—ä–µ–∫—Ç–µ pagination\", function () {",
													"    const total = pm.response.json().pagination.total;",
													"    pm.expect(total).to.be.a('number');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.title).to.not.be.oneOf(['', null, ' ']);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.description).to.not.be.oneOf([null]);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"        pm.expect(item.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID\", function () {",
													"    const ids = pm.response.json().result.map(item => item.id);",
													"    const uniqueIds = new Set(ids);",
													"    pm.expect(ids.length).to.equal(uniqueIds.size);",
													"});",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types?id=d6a7d196-080f-478f-abb0-0bc26aecd51c",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											],
											"query": [
												{
													"key": "id",
													"value": "d6a7d196-080f-478f-abb0-0bc26aecd51c"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get bot type by Title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ pagination\", function () {",
													"    const pagination = pm.response.json().pagination;",
													"    pm.expect(pagination).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª–µ total —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è total –≤ –æ–±—ä–µ–∫—Ç–µ pagination\", function () {",
													"    const total = pm.response.json().pagination.total;",
													"    pm.expect(total).to.be.a('number');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ title –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.title).to.not.be.oneOf(['', null, ' ']);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ description –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.description).to.not.be.oneOf([null]);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ created_at –∏ updated_at –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\", function () {",
													"    pm.response.json().result.forEach(item => {",
													"        pm.expect(item.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"        pm.expect(item.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID\", function () {",
													"    const ids = pm.response.json().result.map(item => item.id);",
													"    const uniqueIds = new Set(ids);",
													"    pm.expect(ids.length).to.equal(uniqueIds.size);",
													"});",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"'; DROP TABLE users; --\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update bot type ‚úÖ",
							"item": [
								{
									"name": "Update bot type titile with desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ description",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ description\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('description');",
													"    pm.expect(result.description).to.be.a('string');",
													"    pm.expect(result.description).to.not.be.empty;",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"batman\",\n  \"description\": \"Aperio trepide corrumpo tremo vulpes anser placeat. Cubo accusator casso modi umbra. Admoneo at clarus aestivus torrens versus. Teneo adnuo venio adamo. Nesciunt creber atrox consectetur custodia. Copia illo claro tamquam defetiscor adsum soleo stips auxilium statim.2222\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types/d6a7d196-080f-478f-abb0-0bc26aecd51c",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types",
												"d6a7d196-080f-478f-abb0-0bc26aecd51c"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update bot type only title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ description",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ description\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.not.have.property('description');",
													"});",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"batman2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types/d6a7d196-080f-478f-abb0-0bc26aecd51c",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types",
												"d6a7d196-080f-478f-abb0-0bc26aecd51c"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update bot type only desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ description",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ description\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('description');",
													"    pm.expect(result.description).to.be.a('string');",
													"    pm.expect(result.description).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.not.have.property('title');",
													"});",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"555552\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types/d6a7d196-080f-478f-abb0-0bc26aecd51c",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types",
												"d6a7d196-080f-478f-abb0-0bc26aecd51c"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete bot type ‚úÖ‚ùå",
							"item": [
								{
									"name": "Delete bot type by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID\", function () {",
													"    const ids = pm.response.json().result.map(item => item.id);",
													"    const uniqueIds = new Set(ids);",
													"    pm.expect(ids.length).to.equal(uniqueIds.size);",
													"});",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types/29c5d8c3-890f-42a9-abac-3658232d6a69",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types",
												"29c5d8c3-890f-42a9-abac-3658232d6a69"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "Create bot type ‚úÖ",
							"item": [
								{
									"name": "Create bot type empty body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Å—Å–∏–≤–∞ errors",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Å—Å–∏–≤–∞ errors\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('errors');",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ errors",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ errors\", function () {",
													"    const errors = pm.response.json().errors;",
													"    errors.forEach(error => {",
													"        pm.expect(error).to.be.an('object');",
													"        pm.expect(error).to.have.property('message');",
													"        pm.expect(error.message).to.be.a('string').that.is.not.empty;",
													"        pm.expect(error).to.have.property('code');",
													"        pm.expect(error.code).to.be.a('string').that.is.not.empty;",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫\", function () {",
													"    const errors = pm.response.json().errors;",
													"    const expectedErrors = [",
													"        { message: \"title should not be empty\", code: \"INPUT-001\" },",
													"        { message: \"title must be a string\", code: \"INPUT-001\" }",
													"    ];",
													"    ",
													"    errors.forEach((error, index) => {",
													"        pm.expect(error.message).to.eql(expectedErrors[index].message);",
													"        pm.expect(error.code).to.eql(expectedErrors[index].code);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type only title body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('created_at');",
													"    pm.expect(result.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('updated_at');",
													"    pm.expect(result.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"verecundia\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type only desc body",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"Aliquid adipisci expedita vulgivagus.\\nDelectus vallum a.\\nAttollo odit depono aduro.\\nTemplum patruus theologus copia acceptus aranea blanditiis thorax utroque.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type empty titile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Å—Å–∏–≤–∞ errors",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Å—Å–∏–≤–∞ errors\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('errors');",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ errors",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ errors\", function () {",
													"    const errors = pm.response.json().errors;",
													"    errors.forEach(error => {",
													"        pm.expect(error).to.be.an('object');",
													"        pm.expect(error).to.have.property('message');",
													"        pm.expect(error.message).to.be.a('string').that.is.not.empty;",
													"        pm.expect(error).to.have.property('code');",
													"        pm.expect(error.code).to.be.a('string').that.is.not.empty;",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫\", function () {",
													"    const errors = pm.response.json().errors;",
													"    const expectedErrors = [",
													"        { message: \"title should not be empty\", code: \"INPUT-001\" },",
													"        { message: \"title must be a string\", code: \"INPUT-001\" }",
													"    ];",
													"    ",
													"    errors.forEach((error, index) => {",
													"        pm.expect(error.message).to.eql(expectedErrors[index].message);",
													"        pm.expect(error.code).to.eql(expectedErrors[index].code);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type empty desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Å—Å–∏–≤–∞ errors",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Å—Å–∏–≤–∞ errors\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('errors');",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ errors",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ errors\", function () {",
													"    const errors = pm.response.json().errors;",
													"    errors.forEach(error => {",
													"        pm.expect(error).to.be.an('object');",
													"        pm.expect(error).to.have.property('message');",
													"        pm.expect(error.message).to.be.a('string').that.is.not.empty;",
													"        pm.expect(error).to.have.property('code');",
													"        pm.expect(error.code).to.be.a('string').that.is.not.empty;",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫\", function () {",
													"    const errors = pm.response.json().errors;",
													"    const expectedErrors = [",
													"        { message: \"title should not be empty\", code: \"INPUT-001\" },",
													"        { message: \"title must be a string\", code: \"INPUT-001\" }",
													"    ];",
													"    ",
													"    errors.forEach((error, index) => {",
													"        pm.expect(error.message).to.eql(expectedErrors[index].message);",
													"        pm.expect(error.code).to.eql(expectedErrors[index].code);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type empty desc filled title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('created_at');",
													"    pm.expect(result.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('updated_at');",
													"    pm.expect(result.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"verecundia2\",\n  \"description\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type empty title filled desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Å—Å–∏–≤–∞ errors",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Å—Å–∏–≤–∞ errors\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('errors');",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ errors",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ errors\", function () {",
													"    const errors = pm.response.json().errors;",
													"    errors.forEach(error => {",
													"        pm.expect(error).to.be.an('object');",
													"        pm.expect(error).to.have.property('message');",
													"        pm.expect(error.message).to.be.a('string').that.is.not.empty;",
													"        pm.expect(error).to.have.property('code');",
													"        pm.expect(error.code).to.be.a('string').that.is.not.empty;",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫\", function () {",
													"    const errors = pm.response.json().errors;",
													"    const expectedError = { message: \"title should not be empty\", code: \"INPUT-001\" };",
													"    ",
													"    pm.expect(errors[0].message).to.eql(expectedError.message);",
													"    pm.expect(errors[0].code).to.eql(expectedError.code);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"\",\n  \"description\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type long (100) title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('created_at');",
													"    pm.expect(result.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('updated_at');",
													"    pm.expect(result.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"100qwnvqlsdkjfqpweiruwozmxncalskdjfqpwoeiruqowieuqpwoeiruasdklfjqlskdjfhqpweiruqowieuqpwodifjalskdjf\",\n  \"description\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type long desc (500)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('created_at');",
													"    pm.expect(result.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('updated_at');",
													"    pm.expect(result.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"100qwnvqlsdkjfqpweiruwozmxncalskdjfqpwoeiruqowieuqpwoeiruasdklfjqlskdjfhqpweiruqowieuqpwodifjalskdjf\",\n  \"description\": \"mnpqxzowieruqalskdjfqpweiruqlskdjfqpoweiruqpwieurqpwoeirualskdjfqpwoeiruzmxnalskdjfqpwoeiruxmcnvlsdkfjpwoeirqlskdjfqpoweiruzmxnalskdjflsqweiruqpwieurasdlkfjqpweiruowpqiekfhvnzlsdkjfpwoeirupxnvowierupzmxnvowieruqalskdjfqweiruqlskdfjpwoeiruqlskdfjpwoeirualskdjfqpow\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type special signs title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('created_at');",
													"    pm.expect(result.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('updated_at');",
													"    pm.expect(result.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"!@#$%\",\n  \"description\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type space signs title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('created_at');",
													"    pm.expect(result.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('updated_at');",
													"    pm.expect(result.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"     \",\n  \"description\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type with invalid parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('created_at');",
													"    pm.expect(result.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('updated_at');",
													"    pm.expect(result.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ cringe",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ cringe\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.not.have.property('cringe');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"petya\",\n  \"description\": \"123\",\n  \"cringe\": \"super\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create bot type with INT in titile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('result');",
													"    pm.expect(jsonData.result).to.be.an('object');",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('id');",
													"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('title');",
													"    pm.expect(result.title).to.be.a('string');",
													"    pm.expect(result.title).to.not.be.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('created_at');",
													"    pm.expect(result.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at\", function () {",
													"    const result = pm.response.json().result;",
													"    pm.expect(result).to.have.property('updated_at');",
													"    pm.expect(result.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"1488\",\n  \"description\": \"123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get bot types ‚ùå",
							"item": [
								{
									"name": "Get (POST) bot type empty body",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete bot types ‚ùå",
							"item": [
								{
									"name": "Delete bot type again by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Å—Å–∏–≤–∞ errors",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Å—Å–∏–≤–∞ errors\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('errors');",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ errors",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ errors\", function () {",
													"    const errors = pm.response.json().errors;",
													"    errors.forEach(error => {",
													"        pm.expect(error).to.be.an('object');",
													"        pm.expect(error).to.have.property('message');",
													"        pm.expect(error.message).to.be.a('string').that.is.not.empty;",
													"        pm.expect(error).to.have.property('code');",
													"        pm.expect(error.code).to.be.a('string').that.is.not.empty;",
													"    });",
													"});",
													"",
													"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫",
													"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫\", function () {",
													"    const errors = pm.response.json().errors;",
													"    const expectedError = { message: \"Bot Type's not found\", code: \"BOTS-002\" };",
													"    ",
													"    pm.expect(errors[0].message).to.eql(expectedError.message);",
													"    pm.expect(errors[0].code).to.eql(expectedError.code);",
													"});",
													"",
													"",
													"pm.test(\"Headers is valid\", function() {",
													"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://sparta.monowork.dev/api/v1/bots/types/d6a7d196-080f-478f-abb0-0bc26aecd51c",
											"protocol": "https",
											"host": [
												"sparta",
												"monowork",
												"dev"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"types",
												"d6a7d196-080f-478f-abb0-0bc26aecd51c"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update bot types ‚ùå",
							"item": []
						}
					]
				},
				{
					"name": "security ‚úÖ",
					"item": [
						{
							"name": "drop database users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result",
											"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ result\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('result');",
											"    pm.expect(jsonData.result).to.be.an('object');",
											"});",
											"",
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id",
											"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ id\", function () {",
											"    const result = pm.response.json().result;",
											"    pm.expect(result).to.have.property('id');",
											"    pm.expect(result.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
											"});",
											"",
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title",
											"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title\", function () {",
											"    const result = pm.response.json().result;",
											"    pm.expect(result).to.have.property('title');",
											"    pm.expect(result.title).to.be.a('string');",
											"    pm.expect(result.title).to.not.be.empty;",
											"});",
											"",
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at",
											"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ created_at\", function () {",
											"    const result = pm.response.json().result;",
											"    pm.expect(result).to.have.property('created_at');",
											"    pm.expect(result.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"});",
											"",
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at",
											"pm.test(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ updated_at\", function () {",
											"    const result = pm.response.json().result;",
											"    pm.expect(result).to.have.property('updated_at');",
											"    pm.expect(result.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"});",
											"",
											"pm.test(\"Headers is valid\", function() {",
											"    // pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"'; DROP TABLE users; --\",\n    \"description\": \"'; DROP TABLE users; --\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://sparta.monowork.dev/api/v1/bots/types",
									"protocol": "https",
									"host": [
										"sparta",
										"monowork",
										"dev"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"types"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}
